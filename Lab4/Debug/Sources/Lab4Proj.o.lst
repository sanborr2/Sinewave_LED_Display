   1              	# 1 "../Sources/Lab4Proj.asm"
   1              	/******************************************************************************
   0              	
   0              	
   0              	
   2              	* 			For : Professor Sandelin, of WWU
   3              	* 	 Assignment : EE244, Lab 4
   4              	*
   5              	* 	Description : Sinewave Display,
   6              	*				  Program that creates sinewave across LEDS[7:0] on the FDRM Shield
   7              	*				  given frequency input by user either via switches or the Terminal.
   8              	* 				  Frequency must be whole decimal number minimum of 1 Hz,
   9              	*                  maximum of 63 Hz.
  10              	*
  11              	*           MCU : K22F,
  12              	*       Assuming: Fsys = 200MHz
  13              	* Supporting Libraries:
  14              	*				  BasicIO.c by Professor Todd Morton of WWU
  15              	*        Author : Robert Sanborn
  16              	*         Date  : 3/13/28
  17              	******************************************************************************/
  18              	                .syntax unified        /* define Syntax */
  19              	                .cpu cortex-m4
  20              	                .fpu fpv4-sp-d16
  21              	                .globl main            /* make main() global so outside file */
  22              	                                       /* can see it. Required for startup   */
  23              	/******************************************************************************
  24              	 * Equates
  25              	 *****************************************************************************/
  26              	
  27              	                .equ ZERO, 0x0                            /* Some Constants for shifting */
  28              	                .equ ONE, 0x1                             /*  and incrementing values    */
  29              	                .equ TWO, 0x2
  30              	                .equ THREE, 0x3
  31              	                .equ FIVE, 0x5
  32              	                .equ SIX, 0x6
  33              	                .equ EIGHT, 0x8
  34              	                .equ TEN, 0xA
  35              	                .equ SIXTEEN, 0x10
  36              	                .equ SEVENTEEN, 0x11
  37              	                .equ EIGHTEEN, 0x12
  38              	                .equ TWENTY, 0x14
  39              	
  40              	                .equ P_TWO_FIVE, 0x2000                    /* Values to compare Q15 numbers to, to 
  41              	                .equ P_FIVE, 0x4000
  42              	                .equ P_SEVEN_FIVE, 0x6000
  43              	                .equ ONE_ZERO, 0x8000
  44              	                .equ ONE_TWO_FIVE, 0xA000
  45              	                .equ ONE_FIVE, 0xC000
  46              	                .equ ONE_SEVEN_FIVE, 0xE000
  47              	
  48              	                .equ LED0, 0x01                            /* BitMasks for setting LBits to turn on
  49              	                .equ LED1, 0x02
  50              	                .equ LED2, 0x04
  51              	                .equ LED3, 0x08
  52              	                .equ LED4, 0x10
  53              	                .equ LED5, 0x20
  54              	                .equ LED6, 0x40
  55              	                .equ LED7, 0x80
  56              	
  57              	                .equ MAX_INPUT, 63
  58              	                .equ MILLION, 1000000
  59              	
  60              	                .equ SIXTY_FIFTH_ENTRY, 0x80               /* BitMask value for the address just be
  61              	                										   /* last entry the Look-up Sine Table */
  62              	
  63              	                .equ TC1US, 40                             /* Number of cycles that takes approx 1 
  64              	                                                           /* Assume Fsys = 200MHz*/
  65              	
  66              	                .equ ASCII_TO_BIN, 0x30
  67              	
  68              	                .equ BM_POTRB_C_D_CLKS_ON, 0x1C00          /* Bitmask to activate Port Clocks for L
  69              	                .equ SIM_SCGC5, 0x40048038
  70              	
  71              	                .equ PORTC_PCR2, 0x4004B008
  72              	                .equ PORTx_PCRn_OFFSET, 0x4
  73              	
  74              	                .equ PORTB_PCR0, 0x4004A000
  75              	                .equ OFFSET_PORTB_PCR16, 0x40
  76              	                .equ OFFSET_PORTB_PCR18, 0x48
  77              	
  78              	                .equ PORTD_PCR2, 0x4004C008
  79              	
  80              	                .equ GPIOD_PDOR, 0x400FF0C0
  81              	                .equ BM_LEDOUT_GPIOD_PDDR, 0x1C            /* Bit Mask that sets LED[2:0] Connectio
  82              	
  83              	                .equ GPIOB_PDOR, 0x400FF040
  84              	                .equ BM_LEDOUT_GPIOB_PDDR, (0xD<<16)+0x3   /* Bit Mask that sets LED[7:3] Connectio
  85              	
  86              	
  87              	                .equ GPIOC_PDOR, 0x400FF080
  88              	                .equ BM_SWIN_GPIOC_PDDR, ~(0xFF<<2)        /* Bit Mask that sets SW[7:0] Connection
  89              	
  90              	                .equ BM_SW_PULLUP_EN, 0x03                 /* Bit Mask that enables and toggles Pul
  91              	
  92              	                .equ GPIOx_PDDR_OFFSET, 0x14
  93              	                .equ GPIOx_PDIR_OFFSET, 0x10
  94              	
  95              	
  96              	                .equ PORT_PCR_MUX_ALT1, 0x01<<8            /* Enable Code for MUX field in PORTx_PC
  97              	
  98              	/******************************************************************************
  99              	 * main program code
 100              	 *****************************************************************************/
 101              	                .section .text
 102              	main:
 103 0000 00F018F9 					bl IOShieldIni          /*  Initialize the FDRM Board for K22F */
 104 0004 FFF7FEFF 					bl BIOOpen              /*  Initialize serial port  */
 105              	
 106 0008 AC4E     					ldr r6, =UserPrompt
 107 000a AD4D     					ldr r5, =InvalidNotify
 108 000c DFF8B482 					ldr r8, =SineTable
 109              	
 110              	mainloop:
 111              					/*		        Check Status of Switches	       */
 112 0010 00F007F9 					bl SwArrayRead
 113 0014 0028     					cmp r0, #ZERO
 114 0016 0746     					mov r7, r0                 /*Preserve LastSwStatus in r7*/
 115              	
 116              					/* If Switch input is nonzero, ignore terminal*/
 117              	
 118 0018 EFF30084 					mrs r4, apsr              /* Preserve status flags against both possible calls*/
 119 001c 1EBF     					ittt ne
 120 001e 3946     					movne r1, r7
 121 0020 4246     					movne r2, r8
 122 0022 00F056F8 					blne DisplayWave            /* Pass Frequency from Switches, LastSwStatus, and SineTable pointe
 123 0026 84F30088 					msr apsr_nzcvq, r4
 124              	
 125              	
 126              					/* Otherwise continuously read from the terminal until given a valid frequency*/
 127 002a EFF30084 					mrs r4, apsr
 128 002e 01BF     					itttt eq
 129 0030 A548     					ldreq r0, =UserFrequency
 130 0032 3146     					moveq r1, r6
 131 0034 2A46     					moveq r2, r5
 132 0036 00F00DF8 					bleq ReadTerminal
 133 003a 84F30088 					msr apsr_nzcvq, r4
 134              	
 135 003e EFF30084 					mrs r4, apsr
 136 0042 02BF     					ittt eq
 137 0044 3946     					moveq r1, r7
 138 0046 4246     					moveq r2, r8
 139 0048 00F043F8 					bleq DisplayWave            /* Pass Frequency from Terminal, LastSwStatus, and SineTable pointe
 140 004c 84F30088 					msr apsr_nzcvq, r4
 141              	
 142 0050 FFF7DEBF 					b mainloop
 143              	
 144              	
 145              	/************************************************************************************************
 146              	 * void ReadTerminal(INT32U us, INT8U LastSwStatus)
 147              	 *
 148              	 * This subroutine sets the period	for the sinewave to be displayed on the IO FDRM Sheild LEDs
 149              	 *
 150              	 *  Params: UserFrequency,
 151              	 *          variable passed by reference that is used as strg pointer for user input from terminal
 152              	 *          UserPrompt, strg pointer to user prompt string
 153              	 *          InvalidNotify, strg pointer to invalid notification string printed to terminal after
 154              	 *
 155              	 *
 156              	 * Corrupts: r4-9, aspr
 157              	 * Returns: Frequency, 32-bit unsigned int that represents the frequency of the LED sinewave
 158              	 *
 159              	 *     MCU: K22F, IO FDRM Sheild
 160              	 * Supporting Libraries:
 161              	 *				  BasicIO.c by Professor Todd Morton of WWU
 162              	 *Assuming: Fsys = 200MHz
 163              	 *
 164              	 * Robert Sanborn, 3/13/18
 165              	 *************************************************************************************************/
 166              	ReadTerminal:
 167 0054 00B5     				 	push {lr}
 168 0056 2DE9F003 					push {r4, r5, r6, r7, r8, r9}
 169              	
 170 005a 0746     					mov r7, r0                      /* Preserve UserFrequency*/
 171 005c 8846     					mov r8, r1					    /* UserPrompt*/
 172 005e 9146     					mov r9, r2					    /* InvalidNotify*/
 173              	
 174 0060 FFF7FEFF 	readinputs:     bl BIOOutCRLF
 175              	
 176              					/*       If Switches are all off, begin reading the Terminal           */
 177 0064 4046     					mov r0, r8            /* Output question to user on screen*/
 178 0066 FFF7FEFF 					bl BIOPutStrg
 179              	
 180              	
 181 006a 9848     					ldr r0, =THREE
 182 006c 3946     					mov r1, r7
 183 006e FFF7FEFF 					bl BIOGetStrg
 184              	
 185 0072 0028     					cmp r0, #ZERO                   /* If user typed an input too long send invalid notification */
 186 0074 40F02380 					bne invalidinput
 187              	
 188              	
 189              					/*   Get first digit  */
 190 0078 3D78     					ldrb r5, [r7]
 191 007a 2846     					mov r0, r5
 192 007c 00F0C7F8 					bl IsDigit
 193              	
 194 0080 0028     					cmp r0, #ZERO
 195 0082 40F01C80 					bne invalidinput
 196              	
 197 0086 A5F13005 					sub r5, #ASCII_TO_BIN
 198              	
 199              					/*   Get possible second digit  */
 200 008a 7C78     					ldrb r4, [r7, #ONE]
 201 008c 2046     					mov r0, r4
 202 008e 00F0BEF8 					bl IsDigit
 203              	
 204 0092 002C     					cmp r4, #ZERO                   /* if user specifies one digit, calculate frequency using one d
 205 0094 03BF     					ittte eq
 206 0096 8E48     					ldreq r0, =ZERO
 207 0098 8E4E     					ldreq r6, =ONE
 208 009a 8F4C     					ldreq r4, ='0
 209 009c 8F4E     					ldrne r6, =TEN
 210              	
 211 009e A4F13004 					sub r4, #ASCII_TO_BIN           /* Use mask value to convert to Bin  */
 212              	
 213 00a2 0028     					cmp r0, #ZERO
 214 00a4 40F00B80 					bne invalidinput                /* Handle invalid input */
 215              	
 216              	
 217              					/* Calculate two digit decimal number, Frequency */
 218 00a8 06FB05F5 					mul r5, r6
 219 00ac 05EB0400 					add r0, r5, r4
 220              	
 221              	 				/* If user input greater than 63, notify them input is invalid */
 222 00b0 3F28     					cmp r0, #MAX_INPUT
 223 00b2 00F30480 					bgt invalidinput
 224              	
 225              					/* Check to make certain input is not zero*/
 226 00b6 0028     					cmp r0, #ZERO
 227 00b8 18BF     					it ne                            /* If Everything Checks out begin display process */
 228 00ba 00F007B8 					bne done
 229              	
 230              					/*            Handle Invalid Inputs        */
 231              	invalidinput:
 232 00be FFF7FEFF 					bl BIOOutCRLF
 233 00c2 4846     					mov r0, r9
 234 00c4 FFF7FEFF 					bl BIOPutStrg
 235              	
 236 00c8 FFF7CABF 					b readinputs
 237              	
 238              	done:
 239 00cc BDE8F003 					pop {r4, r5, r6, r7, r8, r9}
 240 00d0 00BD     					pop {pc}
 241              	
 242              	
 243              	
 244              	/**********************************************************************************************
 245              	 * void DisplayWave(INT32U us, INT8U LastSwStatus) -This subroutine continuously
 246              	 *								 modifies the LED Display on the IO FDRM Shield
 247              	 *                               to make a sinewave.
 248              	 *
 249              	 *  Params: Frequency, 32-bit unsigned int that represents the frequency of the LED sinewave
 250              	 * 	     LastSwStatus, 8 bit signed int that represents most previous status of switches
 251              	 			SineTable, pointer to Lookup table of values for 1 + sin(i/64*2pi*f)
 252              	 * Corrupts: r4-7, aspr
 253              	 * Returns: none
 254              	 *     MCU: K22F, IO FDRM Sheild
 255              	 * Supporting Libraries:
 256              	 *				  BasicIO.c by Professor Todd Morton of WWU
 257              	 *Assuming: Fsys = 200MHz
 258              	 *
 259              	 * Robert Sanborn, 3/9/18
 260              	 ***********************************************************************************************/
 261              	DisplayWave:
 262 00d2 00B5     			        push {lr}
 263 00d4 F0B4     					push {r4, r5, r6, r7}
 264              	
 265              					/* Make copies of LastSwStatus and SineTable*/
 266 00d6 0F46     					mov r7, r1
 267 00d8 1546     					mov r5, r2
 268              	
 269              					/*			Begin Process of creating Sine Wave                      */
 270              	
 271 00da 80F30604 					USAT r4, #SIX, r0               /* Saturate frequency to 63 Hz if not already done so for sanit
 272 00de 4FEA8414 					lsl r4, #SIX                    /* (freq x 64) */
 273 00e2 7F4B     				    ldr r3, =MILLION
 274 00e4 B3FBF4F0 				    udiv r0, r3, r4                 /* Calculate Period, us, as 10^6/(64*freq), */
 275              				    					            /* result is in micro seconds*/
 276              	
 277 00e8 0646     				    mov r6, r0                      /* Make copy of us and SineTable */
 278 00ea 2C46     					mov r4, r5
 279              	
 280 00ec 0029     					cmp r1, #ZERO                   /* If Switch inputs are still off output carriage return on ter
 281 00ee 08BF     					it eq
 282 00f0 FFF7FEFF 				    bleq BIOOutCRLF
 283              	
 284              	
 285 00f4 34F8023B 	sineloop:		ldrh r3, [r4], #TWO
 286              	
 287              	                /* Check what range the value is in, pass the correct LBits value to LEDWrite */
 288              	
 289 00f8 7A4A     					ldr r2, =P_TWO_FIVE             /* Is value in range of [0.00 : 0.25)? */
 290 00fa 9342     					cmp r3, r2
 291 00fc BCBF     					itt lt
 292 00fe 7548     					ldrlt r0, =LED0
 293 0100 00F025B8 					blt call_ledwrite
 294              	
 295 0104 784A     					ldr r2, =P_FIVE                 /* Is value in range of [0.25 : 0.50)? */
 296 0106 9342     					cmp r3, r2
 297 0108 BCBF     					itt lt
 298 010a 7848     					ldrlt r0, =LED1
 299 010c 00F01FB8 					blt call_ledwrite
 300              	
 301 0110 774A     					ldr r2, =P_SEVEN_FIVE           /* Is value in range of [0.50 : 0.75)? */
 302 0112 9342     					cmp r3, r2
 303 0114 BCBF     					itt lt
 304 0116 7748     					ldrlt r0, =LED2
 305 0118 00F019B8 					blt call_ledwrite
 306              	
 307 011c 764A     					ldr r2, =ONE_ZERO               /* Is value in range of [0.75 : 1.00)? */
 308 011e 9342     					cmp r3, r2
 309 0120 BCBF     					itt lt
 310 0122 7648     					ldrlt r0, =LED3
 311 0124 00F013B8 					blt call_ledwrite
 312              	
 313 0128 754A     					ldr r2, =ONE_TWO_FIVE           /* Is value in range of [1.00 : 1.25)? */
 314 012a 9342     					cmp r3, r2
 315 012c BCBF     					itt lt
 316 012e 7548     					ldrlt r0, =LED4
 317 0130 00F00DB8 					blt call_ledwrite
 318              	
 319 0134 744A     					ldr r2, =ONE_FIVE               /* Is value in range of [1.25 : 1.50)? */
 320 0136 9342     					cmp r3, r2
 321 0138 BCBF     					itt lt
 322 013a 7448     					ldrlt r0, =LED5
 323 013c 00F007B8 					blt call_ledwrite
 324              	
 325 0140 734A     					ldr r2, =ONE_SEVEN_FIVE         /* Is value in range of [1.50 : 1.75)? */
 326 0142 9342     					cmp r3, r2
 327 0144 BCBF     					itt lt
 328 0146 7348     					ldrlt r0, =LED6
 329 0148 00F001B8 					blt call_ledwrite
 330              	
 331 014c 7248     					ldr r0, =LED7                   /* Assume at this point that value of sine table */
 332              												    /*  is in range of [1.75 : 2.00] */
 333              	
 334 014e 00F02CF8 	call_ledwrite:  bl LEDWrite
 335              	
 336              					/* Create Delay time to wait for certian period of time */
 337 0152 3046     					mov r0, r6
 338 0154 00F01CF8 					bl Delayus
 339              	
 340              					/* Check if all entries have been iterated over */
 341              	
 342 0158 2946     					mov r1, r5                     /* Use Bitmask of value 0x80 (128) to obtain address  */
 343 015a 6F4A     					ldr r2, =SIXTY_FIFTH_ENTRY	   /*  of "sixty-fifth" entry, or the first address */
 344 015c 1144     					add r1, r2  				   /*  just after the sine table*/
 345              	
 346 015e 8C42     					cmp r4, r1
 347 0160 08BF     					it eq
 348 0162 2C46     					moveq r4, r5
 349              	
 350              					/* Check status of switches for change */
 351 0164 00F05DF8 					bl SwArrayRead
 352 0168 B842     					cmp r0, r7
 353 016a 40F00A80 					bne finish
 354              	
 355 016e 0028     					cmp r0, #ZERO
 356 0170 7FF4C0AF 					bne sineloop
 357              	
 358              					/* Check r0 for q value as sign user has ended sine wave at given frequency if frequency is zer
 359 0174 FFF7FEFF 					bl BIORead
 360 0178 7128     					cmp r0, 'q
 361 017a 00F00280 					beq finish
 362              	
 363 017e FFF7B9BF 					b sineloop
 364              	
 365              	 /*             End Sinewave Display           */
 366 0182 5348     	finish:	        ldr r0, =ZERO
 367 0184 00F011F8 					bl LEDWrite
 368              	
 369 0188 FFF7FEFF 				    bl BIORead             /* Clear UART buffer with BIORead */
 370              	
 371 018c F0BC     					pop {r4, r5, r6, r7}
 372 018e 00BD     					pop {pc}
 373              	
 374              	
 375              	
 376              	
 377              	/**********************************************************************************
 378              	 * void Delayus(INT32U us)
 379              	 *
 380              	 *   Params: us, 32 bit unsigned integer that specifies how long
 381              	 *				   delay loop must last in microseconds
 382              	 *  Returns: none
 383              	 *      MCU: K22F
 384              	 *Assumming: Fsys = 200MHz
 385              	 *
 386              	 * Robert Sanborn, 3/9/18
 387              	 **********************************************************************************/
 388 0190 00B5     	Delayus:        push {lr}
 389 0192 4FF02801 					mov r1, #TC1US
 390 0196 00FB01F2 					mul r2, r0, r1
 391 019a A2F10202 					sub r2, #TWO
 392              	
 393              	/* Delay lasts for "us" microseconds */
 394 019e 013A     	loop:           subs r2, #1
 395 01a0 7FF4FDAF 					bne loop
 396              	
 397 01a4 A1EB0101 					sub r1, r1
 398 01a8 00BD     					pop {pc}
 399              	
 400              	
 401              	/******************************************************************************
 402              	 * void LEDWrite(LBits) - This subroutine updates display of LED for FRDM-K22F
 403              	 *
 404              	 *  Params: LBits, 8-bit unsigned integer
 405              	 * Returns: none
 406              	 *     MCU: K22F, using IO FDRM Shield
 407              	 *
 408              	 * Robert Sanborn, 3/9/18
 409              	 *****************************************************************************/
 410 01aa 00B5     	LEDWrite:       push {lr}
 411              	
 412 01ac A1EB0101 	                sub r1, r1
 413 01b0 A2EB0202 	                sub r2, r2
 414              	
 415              	                /* Manipulate LBits into format for GPIOB_PDOR and GPIOD_PDOR */
 416 01b4 4FEA8000 	                lsl r0, #TWO
 417 01b8 60F30401 	                bfi r1, r0, #ZERO, #FIVE               /* Extract bits for updating LED[2:0] into r
 418              	
 419 01bc 4FEA5010 	                lsr r0, #FIVE
 420 01c0 60F30101 	                bfi r1, r0, #ZERO, #TWO                /* Extract bits for updating LED[7:3] and  p
 421 01c4 4FEA9000 	                lsr r0, #TWO
 422 01c8 4FEA0040 	                lsl r0, #SIXTEEN
 423 01cc 60F31002 	                bfi r2, r0, #ZERO, #SEVENTEEN
 424 01d0 4FEA4000 	                lsl r0, #ONE
 425 01d4 40EA0200 	                orr r0, r2
 426 01d8 40EA0100 	                orr r0, r1                             /* Place bits for all  in r0 */
 427              	
 428              	                /* Extract bits for correct GPIOx_PDOR to update correct LED(s) */
 429 01dc 6FEA0000 	                mvn r0, r0                             /* Make value Active LOW to be used to updat
 430              	
 431 01e0 4E4A     	                ldr r2, =GPIOD_PDOR                    /* Update status of LED[2:0] on IO FDRM Shie
 432 01e2 1368     	                ldr r3, [r2]
 433 01e4 1946     	                mov r1, r3
 434 01e6 60F30401 	                bfi r1, r0, #ZERO, #FIVE
 435 01ea 63F30101 	                bfi r1, r3, #ZERO, #TWO
 436 01ee 1160     	                str r1, [r2]
 437              	
 438 01f0 4B4A     	                ldr r2, =GPIOB_PDOR                    /* Update status of LED[7:3] on IO FDRM Shie
 439 01f2 1368     	                ldr r3, [r2]
 440 01f4 1946     	                mov r1, r3
 441 01f6 60F31301 	                bfi r1, r0, #ZERO, #TWENTY
 442 01fa 63F31101 	                bfi r1, r3, #ZERO, #EIGHTEEN
 443 01fe 60F31001 	                bfi r1, r0, #ZERO, #SEVENTEEN
 444 0202 63F30F01 	                bfi r1, r3, #ZERO, #SIXTEEN
 445 0206 60F30101 	                bfi r1, r0, #ZERO, #TWO
 446 020a 1160     	                str r1, [r2]
 447              	
 448 020c 00BD     	                pop {pc}                               /* Return */
 449              	
 450              	
 451              	/**********************************************************************************
 452              	 * INT8U IsDigit(INT8C) -This subroutine outputs an 8-bit unsigned integer
 453              	 *
 454              	 *  Params: Ascii character in r0, as a 1 byte signed int
 455              	 * Returns: 0 -> if valid decimal digit
 456              	 * 			1 -> if not valid decimal digit
 457              	 *     MCU: K22F
 458              	 *
 459              	 * Robert Sanborn, 3/9/18
 460              	 **********************************************************************************/
 461 020e 00B5     	IsDigit:        push {lr}
 462 0210 2F49     					ldr r1, =0
 463              	
 464 0212 3028     					cmp r0, #'0       /* If INT8C is not an ascii number*/
 465 0214 B8BF     					it lt             /*  return a 1 in r0 */
 466 0216 2F49     					ldrlt r1, =1
 467              	
 468 0218 3928     					cmp r0, #'9
 469 021a C8BF     					it gt
 470 021c 2D49     					ldrgt r1, =1
 471              	
 472 021e 0846     					mov r0, r1
 473 0220 00BD     					pop {pc}
 474              	
 475              	/**********************************************************************************
 476              	 * INT8U SwArrayRead(void) -This subroutine outputs an 8-bit unsigned integer
 477              	 *
 478              	 *  Params: None
 479              	 * Returns: 8-bit unsigned integer, SwStatus, representing status of switches[7:0]
 480              	 *     MCU: K22F, using IO FDRM Shield
 481              	 *
 482              	 * Robert Sanborn, 3/9/18
 483              	 **********************************************************************************/
 484 0222 00B5     	SwArrayRead:    push {lr}
 485              	
 486 0224 3F4B     	                ldr r3, =GPIOC_PDOR
 487 0226 1A69     	                ldr r2, [r3, #GPIOx_PDIR_OFFSET]         /* Read status of Switches on GPIOC_PDIR *
 488 0228 4FEA9202 	                lsr r2, #TWO
 489 022c 2848     	                ldr r0, =ZERO
 490 022e 62F30700 	                bfi r0, r2, #ZERO, #EIGHT                /* Save 8 bits representing the status of 
 491              	
 492 0232 00BD     	                pop {pc}
 493              	
 494              	
 495              	/******************************************************************************
 496              	 * void IO_Shield_Ini(void) - This subroutine initializes the LED Display
 497              	 *                            and Switches on FRDM-K22F
 498              	 *  Params: None
 499              	 * Returns: None
 500              	 *     MCU: K22F, using IO FDRM Shield
 501              	 *
 502              	 * Robert Sanborn, 3/9/18
 503              	 *****************************************************************************/
 504 0234 00B5     	IOShieldIni:    push {lr}
 505              	
 506              	                /* Initialize Clock Gate for Ports B, C, and D */
 507 0236 3C48     					ldr r0, =SIM_SCGC5
 508 0238 0268     	                ldr r2, [r0]
 509 023a 42F4E052 	                orr r2, #BM_POTRB_C_D_CLKS_ON
 510 023e 0260     	                str r2, [r0]
 511              	
 512              	                /*                Initialize Ports for LED and Switches                   */
 513              	
 514              					/* Initialize PORT D Data Direction Register for LED[2:0] to make Outputs */
 515 0240 3649     	                ldr r1, =GPIOD_PDOR
 516 0242 4B69     	                ldr r3, [r1, #GPIOx_PDDR_OFFSET]
 517 0244 43F01C03 	                orr r3, #BM_LEDOUT_GPIOD_PDDR        /* Bit Mask for initializing LED[2:0]*/
 518 0248 4B61     	                str r3, [r1, #GPIOx_PDDR_OFFSET]
 519              	
 520              	                /* Initialize PORT B Data Direction Register for LED[7:3] to make Outputs*/
 521 024a 3549     	                ldr r1, =GPIOB_PDOR
 522 024c 4B69     	                ldr r3, [r1, #GPIOx_PDDR_OFFSET]
 523 024e 374A     	                ldr r2, =BM_LEDOUT_GPIOB_PDDR        /* Bit Mask for initializing LED[7:3] to make 
 524 0250 43EA0203 	                orr r3, r2
 525 0254 4B61     	                str r3, [r1, #GPIOx_PDDR_OFFSET]
 526              	
 527              	
 528              	                /* Initialize PORT C Data Direction register for Switches to become Inputs*/
 529 0256 3349     	                ldr r1, =GPIOC_PDOR
 530 0258 4B69     	                ldr r3, [r1, #GPIOx_PDDR_OFFSET]
 531 025a 354A     	                ldr r2, =BM_SWIN_GPIOC_PDDR
 532 025c 03EA0203 	                and r3, r2                               /* Bit Mask for initializing SWITCH[7:0]*/
 533 0260 4B61     	                str r3, [r1, #GPIOx_PDDR_OFFSET]
 534              	
 535              					/*                  Initialize LEDs as all off                             */
 536              	
 537              					/* Initialize the GPIOD_PDOR for LED[2:0] to off state */
 538 0262 2E49     	                ldr r1, =GPIOD_PDOR
 539 0264 0B68     	                ldr r3, [r1]
 540 0266 43F01C03 	                orr r3, #BM_LEDOUT_GPIOD_PDDR        /* Reuse GPIOD_PDDR mask to initailize LED[2:0
 541 026a 0B60     	                str r3, [r1]
 542              	
 543              	                /* Initialize the GPIOB_PDDR for LED[7:3] to off state */
 544 026c 2C49     	                ldr r1, =GPIOB_PDOR
 545 026e 0B68     	                ldr r3, [r1]
 546 0270 2E4A     	                ldr r2, =BM_LEDOUT_GPIOB_PDDR
 547 0272 43EA0203 	                orr r3, r2                           /* Use Mask for GPIOB_PDDR for PORTB to */
 548 0276 0B60     	                str r3, [r1]
 549              	
 550              					/*              Initialize PCRs for LEDs and Switches                   */
 551              	
 552              	                /* Initialize Pin Control Registers for LED[2:0] on PORTD */
 553 0278 2E48     	                ldr r0, =PORTD_PCR2
 554 027a 2F49     	                ldr r1, =PORT_PCR_MUX_ALT1
 555 027c 40F8041B 	                str r1, [r0], #PORTx_PCRn_OFFSET
 556 0280 40F8041B 	                str r1, [r0], #PORTx_PCRn_OFFSET
 557 0284 0160     	                str r1, [r0]
 558              	
 559              	                /* Initialize Pin Control Registers for LED[7:3] on PORTD */
 560 0286 2D48     	                ldr r0, =PORTB_PCR0
 561 0288 0160     	                str r1, [r0]                             /* r1 still has PORT_PCR_MUX_ALT1*/
 562 028a 4160     	                str r1, [r0, #PORTx_PCRn_OFFSET]
 563 028c 0164     	                str r1, [r0, #OFFSET_PORTB_PCR16]
 564 028e 40F8481F 	                str r1, [r0, #OFFSET_PORTB_PCR18]!
 565 0292 4160     	                str r1, [r0, #PORTx_PCRn_OFFSET]
 566              	
 567              	  				/* Initialize Pin Control Registers for SWITCH[7:0] on PORTC    */
 568 0294 2A48     	                ldr r0, =PORTC_PCR2
 569 0296 41F00301 	                orr r1, #BM_SW_PULLUP_EN                  /* r1 now MUX Enable OR'ed with Pullup Re
 570 029a 40F8041B 	                str r1, [r0], #PORTx_PCRn_OFFSET
 571 029e 40F8041B 	                str r1, [r0], #PORTx_PCRn_OFFSET
 572 02a2 40F8041B 	                str r1, [r0], #PORTx_PCRn_OFFSET
 573 02a6 40F8041B 	                str r1, [r0], #PORTx_PCRn_OFFSET
 574 02aa 40F8041B 	                str r1, [r0], #PORTx_PCRn_OFFSET
 575 02ae 40F8041B 	                str r1, [r0], #PORTx_PCRn_OFFSET
 576 02b2 40F8041B 	                str r1, [r0], #PORTx_PCRn_OFFSET
 577 02b6 0160     	                str r1, [r0]
 578              	
 579 02b8 00BD     	                pop {pc}                                 /* Return to Main, Initialization finished
 580              	
 581              	
 582              	/******************************************************************************
 583              	* Stored Constants
 584              	******************************************************************************/
 585 02ba 0000     	                .section .rodata
 586              	
 587 0000 48656C6C 	UserPrompt:     .asciz "Hello User, enter a desired frequency for your sinewave. Input can only be 
 587      6F205573 
 587      65722C20 
 587      656E7465 
 587      72206120 
 588              	
 589 008f 496E7661 	InvalidNotify:  .asciz "Invalid input, try again.\n\r"
 589      6C696420 
 589      696E7075 
 589      742C2074 
 589      72792061 
 590              	
 591              	
 592              	          /* 64-entry Look-Up Table in Q15 for values of  */
 593              	          /*  f(i) = 1+sin(2*pi*i/64) where i is */
 594              	          /*  the ith entry in the table */
 595 00ab 8B8CF898 	SineTable:      .2byte 0x8C8B, 0x98F8, 0xA528, 0xB0FB
 595      28A5FBB0 
 596 00b3 56BC1CC7 					.2byte 0xBC56, 0xC71C, 0xD133, 0xDA82
 596      33D182DA 
 597 00bb F2E26DEA 					.2byte 0xE2F2, 0xEA6D, 0xF0E2, 0xF641
 597      E2F041F6 
 598 00c3 7DFA8AFD 				    .2byte 0xFA7D, 0xFD8A, 0xFF62, 0xFFFF
 598      62FFFFFF 
 599 00cb 62FF8AFD 					.2byte 0xFF62, 0xFD8A, 0xFA7D, 0xF641
 599      7DFA41F6 
 600 00d3 E2F06DEA 					.2byte 0xF0E2, 0xEA6D, 0xE2F2, 0xDA82
 600      F2E282DA 
 601 00db 33D11CC7 					.2byte 0xD133, 0xC71C, 0xBC56, 0xB0FB
 601      56BCFBB0 
 602 00e3 28A5F898 					.2byte 0xA528, 0x98F8, 0x8C8B, 0x8000
 602      8B8C0080 
 603 00eb 74730767 					.2byte 0x7374, 0x6707, 0x5AD7, 0x4F04
 603      D75A044F 
 604 00f3 A943E338 					.2byte 0x43A9, 0x38E3, 0x2ECC, 0x257D
 604      CC2E7D25 
 605 00fb 0D1D9215 					.2byte 0x1D0D, 0x1592, 0x0F1D, 0x09BE
 605      1D0FBE09 
 606 0103 82057502 					.2byte 0x0582, 0x0275, 0x009D, 0x0000
 606      9D000000 
 607 010b 9D007502 					.2byte 0x009D, 0x0275, 0x0582, 0x09BE
 607      8205BE09 
 608 0113 1D0F9215 					.2byte 0x0F1D, 0x1592, 0x1D0D, 0x257D
 608      0D1D7D25 
 609 011b CC2EE338 					.2byte 0x2ECC, 0x38E3, 0x43A9, 0x4F04
 609      A943044F 
 610 0123 D75A0767 					.2byte 0x5AD7, 0x6707, 0x7374, 0x7FFF
 610      7473FF7F 
 611              	
 612              	/******************************************************************************
 613              	* Variables
 614              	******************************************************************************/
 615              	                .section .bss
 616              	
 617              	                .comm UserFrequency, 3
DEFINED SYMBOLS
../Sources/Lab4Proj.asm:102    .text:00000000 main
../Sources/Lab4Proj.asm:27     *ABS*:00000000 ZERO
../Sources/Lab4Proj.asm:28     *ABS*:00000001 ONE
../Sources/Lab4Proj.asm:29     *ABS*:00000002 TWO
../Sources/Lab4Proj.asm:30     *ABS*:00000003 THREE
../Sources/Lab4Proj.asm:31     *ABS*:00000005 FIVE
../Sources/Lab4Proj.asm:32     *ABS*:00000006 SIX
../Sources/Lab4Proj.asm:33     *ABS*:00000008 EIGHT
../Sources/Lab4Proj.asm:34     *ABS*:0000000a TEN
../Sources/Lab4Proj.asm:35     *ABS*:00000010 SIXTEEN
../Sources/Lab4Proj.asm:36     *ABS*:00000011 SEVENTEEN
../Sources/Lab4Proj.asm:37     *ABS*:00000012 EIGHTEEN
../Sources/Lab4Proj.asm:38     *ABS*:00000014 TWENTY
../Sources/Lab4Proj.asm:40     *ABS*:00002000 P_TWO_FIVE
../Sources/Lab4Proj.asm:41     *ABS*:00004000 P_FIVE
../Sources/Lab4Proj.asm:42     *ABS*:00006000 P_SEVEN_FIVE
../Sources/Lab4Proj.asm:43     *ABS*:00008000 ONE_ZERO
../Sources/Lab4Proj.asm:44     *ABS*:0000a000 ONE_TWO_FIVE
../Sources/Lab4Proj.asm:45     *ABS*:0000c000 ONE_FIVE
../Sources/Lab4Proj.asm:46     *ABS*:0000e000 ONE_SEVEN_FIVE
../Sources/Lab4Proj.asm:48     *ABS*:00000001 LED0
../Sources/Lab4Proj.asm:49     *ABS*:00000002 LED1
../Sources/Lab4Proj.asm:50     *ABS*:00000004 LED2
../Sources/Lab4Proj.asm:51     *ABS*:00000008 LED3
../Sources/Lab4Proj.asm:52     *ABS*:00000010 LED4
../Sources/Lab4Proj.asm:53     *ABS*:00000020 LED5
../Sources/Lab4Proj.asm:54     *ABS*:00000040 LED6
../Sources/Lab4Proj.asm:55     *ABS*:00000080 LED7
../Sources/Lab4Proj.asm:57     *ABS*:0000003f MAX_INPUT
../Sources/Lab4Proj.asm:58     *ABS*:000f4240 MILLION
../Sources/Lab4Proj.asm:60     *ABS*:00000080 SIXTY_FIFTH_ENTRY
../Sources/Lab4Proj.asm:63     *ABS*:00000028 TC1US
../Sources/Lab4Proj.asm:66     *ABS*:00000030 ASCII_TO_BIN
../Sources/Lab4Proj.asm:68     *ABS*:00001c00 BM_POTRB_C_D_CLKS_ON
../Sources/Lab4Proj.asm:69     *ABS*:40048038 SIM_SCGC5
../Sources/Lab4Proj.asm:71     *ABS*:4004b008 PORTC_PCR2
../Sources/Lab4Proj.asm:72     *ABS*:00000004 PORTx_PCRn_OFFSET
../Sources/Lab4Proj.asm:74     *ABS*:4004a000 PORTB_PCR0
../Sources/Lab4Proj.asm:75     *ABS*:00000040 OFFSET_PORTB_PCR16
../Sources/Lab4Proj.asm:76     *ABS*:00000048 OFFSET_PORTB_PCR18
../Sources/Lab4Proj.asm:78     *ABS*:4004c008 PORTD_PCR2
../Sources/Lab4Proj.asm:80     *ABS*:400ff0c0 GPIOD_PDOR
../Sources/Lab4Proj.asm:81     *ABS*:0000001c BM_LEDOUT_GPIOD_PDDR
../Sources/Lab4Proj.asm:83     *ABS*:400ff040 GPIOB_PDOR
../Sources/Lab4Proj.asm:84     *ABS*:000d0003 BM_LEDOUT_GPIOB_PDDR
../Sources/Lab4Proj.asm:87     *ABS*:400ff080 GPIOC_PDOR
../Sources/Lab4Proj.asm:88     *ABS*:fffffc03 BM_SWIN_GPIOC_PDDR
../Sources/Lab4Proj.asm:90     *ABS*:00000003 BM_SW_PULLUP_EN
../Sources/Lab4Proj.asm:92     *ABS*:00000014 GPIOx_PDDR_OFFSET
../Sources/Lab4Proj.asm:93     *ABS*:00000010 GPIOx_PDIR_OFFSET
../Sources/Lab4Proj.asm:96     *ABS*:00000100 PORT_PCR_MUX_ALT1
../Sources/Lab4Proj.asm:504    .text:00000234 IOShieldIni
../Sources/Lab4Proj.asm:103    .text:00000000 $t
../Sources/Lab4Proj.asm:587    .rodata:00000000 UserPrompt
../Sources/Lab4Proj.asm:589    .rodata:0000008f InvalidNotify
../Sources/Lab4Proj.asm:595    .rodata:000000ab SineTable
../Sources/Lab4Proj.asm:110    .text:00000010 mainloop
../Sources/Lab4Proj.asm:484    .text:00000222 SwArrayRead
../Sources/Lab4Proj.asm:261    .text:000000d2 DisplayWave
                            *COM*:00000003 UserFrequency
../Sources/Lab4Proj.asm:166    .text:00000054 ReadTerminal
../Sources/Lab4Proj.asm:174    .text:00000060 readinputs
../Sources/Lab4Proj.asm:231    .text:000000be invalidinput
../Sources/Lab4Proj.asm:461    .text:0000020e IsDigit
../Sources/Lab4Proj.asm:238    .text:000000cc done
../Sources/Lab4Proj.asm:285    .text:000000f4 sineloop
../Sources/Lab4Proj.asm:334    .text:0000014e call_ledwrite
../Sources/Lab4Proj.asm:410    .text:000001aa LEDWrite
../Sources/Lab4Proj.asm:388    .text:00000190 Delayus
../Sources/Lab4Proj.asm:366    .text:00000182 finish
../Sources/Lab4Proj.asm:394    .text:0000019e loop
../Sources/Lab4Proj.asm:585    .text:000002ba $d
                   .debug_aranges:0000000c $d

UNDEFINED SYMBOLS
BIOOpen
BIOOutCRLF
BIOPutStrg
BIOGetStrg
BIORead
